services:
  gateway:
    build: ./api-gateway
    container_name: api-gateway
    ports:
      - "8080:8080"
    depends_on:
      logger:
        condition: service_healthy
      aggregator:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy

  logger:
    build: ./logger-stats-service
    container_name: logger
    ports:
      - "8081:8081"
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: curl --fail http://localhost:8081/actuator/health || exit 1
      interval: 10s
      timeout: 5s
      retries: 5

  aggregator:
    build: ./aggregator-service
    container_name: aggregator
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: curl --fail http://localhost:8082/actuator/health || exit 1
      interval: 10s
      timeout: 5s
      retries: 5

  flusher:
    build: ./flusher-service
    container_name: flusher
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy

  query:
    build: ./api-query-service
    container_name: query
    ports:
      - "8082:8082"
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'

  db:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_DB: statsdb
      POSTGRES_USER: statsuser
      POSTGRES_PASSWORD: statspassword
    ports:
      - "5432:5432"
    volumes:
      - ./db/init.sh:/docker-entrypoint-initdb.d/init.sh
      - ./db/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "statsuser"]
      interval: 10s
      timeout: 5s
      retries: 5